OpenXC Android Library
=========================

This library is a part of the [OpenXC][] project.

## Description

This Android library contains the tools required to read vehicle data from the
vehicle's CAN bus through the OpenXC CAN translation module in any Android
application..

## Usage

Vehicle measurements are accessed through an [Android service][services]. Your
application connects to the service using the Android Interface Definition
Language ([AIDL][]) - check out the Architecture section for more details.

### Service Binding

You must first [bind with the VehicleService][binding] before you can receive
any vehicle data.

Request to bind with the service in the normal fashion:

    Intent intent = new Intent(this, VehicleService.class);
    bindService(intent, mConnection, Context.BIND_AUTO_CREATE);

Then, in your `onServiceConnected()` grab the service handle and cast it to the
correct type:

    VehcileService vehicleService;
    private ServiceConnection mConnection = new ServiceConnection() {
        // Called when the connection with the service is established
        public void onServiceConnected(ComponentName className, IBinder service) {
            vehicleService = ((VehicleService.VehicleServiceBinder)
                    service).getService();
        }

        // Called when the connection with the service disconnects unexpectedly
        public void onServiceDisconnected(ComponentName className) {
            vehicleService = null;
        }
    };

### Synchronous

Once the service is bound and you have a connection to it in your activity, you
can receive measurements on demand (i.e. synchronously).

    VehicleSpeed measurement = vehicleService.get(VehicleSpeed.class);

### Asynchronous

If you need to be kept up-to-date on any vehicle measurement, you can also
register with the service to be notified of updates.

    VehicleSpeed.Listener listener = new VehicleSpeed.Listener() {
        public void receive(VehicleMeasurement measurement) {
            final VehicleSpeed speed = (VehicleSpeed) measurement;
            if(!speed.isNone()) {
                // do stuff with the measurement
            }
        }
    };
    vehicleService.addListener(VehicleSpeed.class, listener);

### Measurements

You've probably noticed that vehicle data is returned encapsulated in an object.
In the examples above, we used the `VehicleSpeed` measurement. All of the data
types supported by OpenXC are provided as children of the `Measurement` class.

The parent class provides a standard interface for all measurements, starting
with a way to retrieve its value:

    vehicleService.get(VehicleSpeed.class);

Occasionally a measurement will not have been received from the CAN translator
yet - it could be a malfunction, or you're just checking too early for an
infrequently updated measurement:

    VehicleSpeed measurement = vehicleService.get(VehicleSpeed.class);
    if(measurement.isNone()) {
        // do stuff with it
    }

You can check the age of a measurement to determine how long ago the state was
actually reflected in the physical vehicle:

    VehicleSpeed measurement = vehicleService.get(VehicleSpeed.class);
    if(measurement.getAge() < 10) {
        // only if age is less than 10 seconds
    }

For some measurements, an accuracy measurement may help you determine how much
the value should be trusted. Most measurements from the vehicle are quite
accurate, however. The units of the variance are the same as the measurement
itself.

    if(measurement.getVariance() < 10) {
        // only if speed's variance is less than 10 m/s (variance is same unit
        // as the measurement itself)
    }

The range of every measurement is defined in the class, and can be queried
programmatically if you need to figure out your the current value's relative
position:

    range = measurement.getRange();
    int percentage = measurement.getValue() / range;

## Contributing

We'd love your input - the project is organized as a Maven project, but also
works fine if you're an Eclipse user. The recommended steps to set up the
openxc-android project in Eclipse are:

* Install [Eclipse](http://www.eclipse.org/downloads/) Indigo or later
    * The Java Developer version is the best choice to start - other editions
      don't include Maven integration, so you will have to install that
      manually.
* Install the [Android SDK](http://developer.android.com/sdk/index.html) and
  then the [ADT plugin](http://developer.android.com/sdk/eclipse-adt.html)
  from Google.
* Clone the [openxc-android](https://github.com/openxc/openxc-android] repo
    (this repo)
* Open Eclipse and go to `File -> Import -> Maven -> Existing Maven Projects`.
  Navigate to where you cloned the repository and import the `openxc`,
  `openxc-it` and `openxc-examples` projects.
* You will be prompted to install the m2e-android connector - do that, then
  restart Eclipse.
* Right click on the `openxc` project, go to Maven -> Update Project
  Configuration. Select all of the openxc projects in the dialog.
* Right click on the openxc-it project, go to Build Path -> Configure Build
  Path. Click the projects tab and add a reference to the `openxc` project.
    * Repeat for the openxc-examples project.
* There should be no changes in the repository at this point (`git status`
  should report nothing) and there should be no errors in Eclipse.

### Android SDK and Maven

The most recent version of the Android SDK currently available in the central
Maven repository is 2.3. You'll need to install a more recent version in your
own local repository.

The recommended method is using the
[maven-android-sdk-deployer](https://github.com/mosabua/maven-android-sdk-deployer).
All you should need is to set the `ANDROID_HOME` environment variable (see the
project's README for more details) and run:

    $ mvn install -P 3.1

If you have a remote Maven repository you share with others, I'm sure they would
thank you if you uploaded the resulting files - that way, nobody needs to do
this part.

### Installation

To compile and run the test suite on a connected Android device:

    openxc-android/ $ mvn clean install

This will:

* Clean up any existing compiled files
* Compile, test and package the openxc apklib, and install it to your local
  Maven repository (usually `~/.m2/repository`)
* Compile and package the openxc-it integration test apk using the version
  of the openxc library that you just built.
* Re-install the openxc-it package to the connected Android device (either
  an emulator or tablet).
* Run the instrumentation tests in the openxc-it package on the device

At the moment, the instrumentation tests block waiting for a debugger to attach.
Fire up Eclipse and the DDMS perspective (a part of the Eclipse ADT from
Google), find the openxc process in the list (it should have a red bug next to
it) and click the green bug icon to start debugging the process. Once you've
enabled debugging once, it should do so automatically each time you run the
tests for this Eclipse session.

If you don't wish the tests to wait for a debugger, change the `testDebug`
setting in `openxc-android/pom.xml` to `false`.

To deploy the examples to a device:

    $ mvn android:deploy -Dandroid.file=examples/target/openxc-examples.apk

## License

Copyright (c) 2011 Ford Motor Company
Licensed under the [Apache License, Version 2.0][apache]

[apache]: http://www.apache.org/licenses/LICENSE-2.0.html
[binding]: http://developer.android.com/guide/topics/fundamentals/bound-services.html#Binding)
[services]: http://developer.android.com/guide/topics/fundamentals/services.html
[AIDL]: http://developer.android.com/guide/developing/tools/aidl.html
[OpenXC]: http://openxcplatform.com
